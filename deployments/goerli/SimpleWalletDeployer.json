{
  "address": "0x6D261eD72837f4001d4Cc89f9002ddb5AB3a93B2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IEntryPoint",
          "name": "entryPoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        }
      ],
      "name": "deployWallet",
      "outputs": [
        {
          "internalType": "contract SimpleWallet",
          "name": "ret",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IEntryPoint",
          "name": "entryPoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        }
      ],
      "name": "getWalletAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd020123120b90329dd79b8f7504c0b9ea3d804a2900ec6dc928651df57b08574",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x8d8a9Cf53b7D95C148cB159384D249F8FB68db3f",
    "contractAddress": null,
    "transactionIndex": 84,
    "gasUsed": "1386999",
    "logsBloom": "0x
    "blockHash": "0x495dc91a785e8cdc6a3673061763769e8d29624ff5e750af0de0ba86d91f21be",
    "transactionHash": "0xd020123120b90329dd79b8f7504c0b9ea3d804a2900ec6dc928651df57b08574",
    "logs": [],
    "blockNumber": 8038891,
    "cumulativeGasUsed": "23251744",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "ff095f787ad362d9ed52cb006a9b37ab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"entryPoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"deployWallet\",\"outputs\":[{\"internalType\":\"contract SimpleWallet\",\"name\":\"ret\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"entryPoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"getWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deployWallet(address,address,uint256)\":{\"notice\":\"create a wallet, and return its address. returns the address even if the wallet is already deployed. Note that during UserOperation execution, this method is called only if the wallet is not deployed. This method returns an existing wallet address so that entryPoint.getSenderAddress() would work even after wallet creation\"},\"getWalletAddress(address,address,uint256)\":{\"notice\":\"calculate the counterfactual address of this wallet as it would be returned by deployWallet()\"}},\"notice\":\"A sampler deployer contract for SimpleWallet A UserOperations \\\"initCode\\\" holds the address of the deployer, and a method call (to deployWallet, in this sample deployer). The deployer's deployWallet returns the target wallet address even if it is already installed. This way, the entryPoint.getSenderAddress() can be called either before or after the wallet is created.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/samples/SimpleWalletDeployer.sol\":\"SimpleWalletDeployer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0x62237e1773cbf99739b7019f3772a2ff5360d56edb69751b513237f5fcd78571\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"contracts/core/BaseWallet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"../interfaces/IWallet.sol\\\";\\nimport \\\"../interfaces/IEntryPoint.sol\\\";\\n\\n/**\\n * Basic wallet implementation.\\n * this contract provides the basic logic for implementing the IWallet interface  - validateUserOp\\n * specific wallet implementation should inherit it and provide the wallet-specific logic\\n */\\nabstract contract BaseWallet is IWallet {\\n    using UserOperationLib for UserOperation;\\n\\n    /**\\n     * return the wallet nonce.\\n     * subclass should return a nonce value that is used both by _validateAndUpdateNonce, and by the external provider (to read the current nonce)\\n     */\\n    function nonce() public view virtual returns (uint256);\\n\\n    /**\\n     * return the entryPoint used by this wallet.\\n     * subclass should return the current entryPoint used by this wallet.\\n     */\\n    function entryPoint() public view virtual returns (IEntryPoint);\\n\\n    /**\\n     * Validate user's signature and nonce.\\n     * subclass doesn't need to override this method. Instead, it should override the specific internal validation methods.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 requestId, address aggregator, uint256 missingWalletFunds)\\n    external override virtual returns (uint256 deadline) {\\n        _requireFromEntryPoint();\\n        deadline = _validateSignature(userOp, requestId, aggregator);\\n        if (userOp.initCode.length == 0) {\\n            _validateAndUpdateNonce(userOp);\\n        }\\n        _payPrefund(missingWalletFunds);\\n    }\\n\\n    /**\\n     * ensure the request comes from the known entrypoint.\\n     */\\n    function _requireFromEntryPoint() internal virtual view {\\n        require(msg.sender == address(entryPoint()), \\\"wallet: not from EntryPoint\\\");\\n    }\\n\\n    /**\\n     * validate the signature is valid for this message.\\n     * @param userOp validate the userOp.signature field\\n     * @param requestId convenient field: the hash of the request, to check the signature against\\n     *          (also hashes the entrypoint and chain-id)\\n     * @param aggregator the current aggregator. can be ignored by wallets that don't use aggregators\\n     * @return deadline the last block timestamp this operation is valid, or zero if it is valid indefinitely.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function _validateSignature(UserOperation calldata userOp, bytes32 requestId, address aggregator)\\n    internal virtual returns (uint256 deadline);\\n\\n    /**\\n     * validate the current nonce matches the UserOperation nonce.\\n     * then it should update the wallet's state to prevent replay of this UserOperation.\\n     * called only if initCode is empty (since \\\"nonce\\\" field is used as \\\"salt\\\" on wallet creation)\\n     * @param userOp the op to validate.\\n     */\\n    function _validateAndUpdateNonce(UserOperation calldata userOp) internal virtual;\\n\\n    /**\\n     * sends to the entrypoint (msg.sender) the missing funds for this transaction.\\n     * subclass MAY override this method for better funds management\\n     * (e.g. send to the entryPoint more than the minimum required, so that in future transactions\\n     * it will not be required to send again)\\n     * @param missingWalletFunds the minimum value this method should send the entrypoint.\\n     *  this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster.\\n     */\\n    function _payPrefund(uint256 missingWalletFunds) internal virtual {\\n        if (missingWalletFunds != 0) {\\n            (bool success,) = payable(msg.sender).call{value : missingWalletFunds, gas : type(uint256).max}(\\\"\\\");\\n            (success);\\n            //ignore failure (its EntryPoint's job to verify, not wallet.)\\n        }\\n    }\\n\\n    /**\\n     * expose an api to modify the entryPoint.\\n     * must be called by current \\\"admin\\\" of the wallet.\\n     * @param newEntryPoint the new entrypoint to trust.\\n     */\\n    function updateEntryPoint(address newEntryPoint) external {\\n        _requireFromAdmin();\\n        _updateEntryPoint(newEntryPoint);\\n    }\\n\\n    /**\\n     * ensure the caller is allowed \\\"admin\\\" operations (such as changing the entryPoint)\\n     * default implementation trust the wallet itself (or any signer that passes \\\"validateUserOp\\\")\\n     * to be the \\\"admin\\\"\\n     */\\n    function _requireFromAdmin() internal view virtual {\\n        require(msg.sender == address(this) || msg.sender == address(entryPoint()), \\\"not admin\\\");\\n    }\\n\\n    /**\\n     * update the current entrypoint.\\n     * subclass should override and update current entrypoint\\n     */\\n    function _updateEntryPoint(address) internal virtual;\\n}\\n\",\"keccak256\":\"0xc5ee3797a86f57714f755d1814cb5660307d8a980405b1008ba06f1f3301261a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n\\n    /**\\n     * validate aggregated signature.\\n     * revert if the aggregated signature does not match the given list of operations.\\n     */\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\n\\n    /**\\n     * validate signature of a single userOp\\n     * This method is called by EntryPoint.simulateUserOperation() if the wallet has an aggregator.\\n     * First it validates the signature over the userOp. then it return data to be used when creating the handleOps:\\n     * @param userOp the userOperation received from the user.\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\n     *    (usually empty, unless wallet and aggregator support some kind of \\\"multisig\\\"\\n     */\\n    function validateUserOpSignature(UserOperation calldata userOp)\\n    external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation\\n     * @param userOps array of UserOperations to collect the signatures from.\\n     * @return aggregatesSignature the aggregated signature\\n     */\\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatesSignature);\\n}\\n\",\"keccak256\":\"0xc1c756fd332c0d868b7b8988f697c46eb2c9fc679e0b1592f80d5386732a7bb5\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IEntryPoint.sol\":{\"content\":\"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"./UserOperation.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\n\\ninterface IEntryPoint is IStakeManager {\\n\\n    /***\\n     * An event emitted after each successful request\\n     * @param requestId - unique identifier for the request (hash its entire content, except signature).\\n     * @param sender - the account that generates this request.\\n     * @param paymaster - if non-null, the paymaster that pays for this request.\\n     * @param nonce - the nonce value from the request\\n     * @param actualGasCost - the total cost (in gas) of this request.\\n     * @param actualGasPrice - the actual gas price the sender agreed to pay.\\n     * @param success - true if the sender transaction succeeded, false if reverted.\\n     */\\n    event UserOperationEvent(bytes32 indexed requestId, address indexed sender, address indexed paymaster, uint256 nonce, uint256 actualGasCost, uint256 actualGasPrice, bool success);\\n\\n    /**\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\\n     * @param requestId the request unique identifier.\\n     * @param sender the sender of this request\\n     * @param nonce the nonce used in the request\\n     * @param revertReason - the return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event UserOperationRevertReason(bytes32 indexed requestId, address indexed sender, uint256 nonce, bytes revertReason);\\n\\n    /**\\n     * a custom revert error of handleOps, to identify the offending op.\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\\n     *  @param paymaster - if paymaster.validatePaymasterUserOp fails, this will be the paymaster's address. if validateUserOp failed,\\n     *       this value will be zero (since it failed before accessing the paymaster)\\n     *  @param reason - revert reason\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of wallet/paymaster reverts.\\n     */\\n    error FailedOp(uint256 opIndex, address paymaster, string reason);\\n\\n    /**\\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\\n     */\\n    error SignatureValidationFailed(address aggregator);\\n\\n    //UserOps handled, per aggregator\\n    struct UserOpsPerAggregator {\\n        UserOperation[] userOps;\\n\\n        // aggregator address\\n        IAggregator aggregator;\\n        // aggregated signature\\n        bytes signature;\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperation.\\n     * no signature aggregator is used.\\n     * if any wallet requires an aggregator (that is, it returned an \\\"actualAggregator\\\" when\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n     * @param ops the operations to execute\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\\n\\n    /**\\n     * Execute a batch of UserOperation with Aggregators\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator wallets)\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * generate a request Id - unique identifier for this request.\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n     */\\n    function getRequestId(UserOperation calldata userOp) external view returns (bytes32);\\n\\n    /**\\n     * Simulate a call to wallet.validateUserOp and paymaster.validatePaymasterUserOp.\\n     * @dev this method always revert. Successful result is SimulationResult error. other errors are failures.\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the wallet's data.\\n     * @param userOp the user operation to validate.\\n     */\\n    function simulateValidation(UserOperation calldata userOp) external;\\n\\n    /**\\n     * Successful result from simulateValidation.\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\n     * @param prefund the required prefund for this operation\\n     * @param deadline until what time this userOp is valid (the minimum value of wallet and paymaster's deadline)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     */\\n    error SimulationResult(uint256 preOpGas, uint256 prefund, uint256 deadline, PaymasterInfo paymasterInfo);\\n\\n    /**\\n     * returned paymaster info.\\n     * If the UserOperation contains a paymaster, these fields are filled with the paymaster's stake value and delay.\\n     * A bundler must verify these values are above the minimal required values, or else reject the UserOperation.\\n     */\\n    struct PaymasterInfo {\\n        uint256 paymasterStake;\\n        uint256 paymasterUnstakeDelay;\\n    }\\n\\n\\n    /**\\n     * Successful result from simulateValidation, if the wallet returns a signature aggregator\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\n     * @param prefund the required prefund for this operation\\n     * @param deadline until what time this userOp is valid (the minimum value of wallet and paymaster's deadline)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     * @param aggregationInfo signature aggregation info (if the wallet requires signature aggregator)\\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\\n     */\\n    error SimulationResultWithAggregation(uint256 preOpGas, uint256 prefund, uint256 deadline, PaymasterInfo paymasterInfo, AggregationInfo aggregationInfo);\\n\\n    /**\\n     * returned aggregated signature info.\\n     * the aggregator returned by the wallet, and its current stake.\\n     */\\n    struct AggregationInfo {\\n        address actualAggregator;\\n        uint256 aggregatorStake;\\n        uint256 aggregatorUnstakeDelay;\\n    }\\n\\n    /**\\n     * Get counterfactual sender address.\\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\n     * this method always revert, and returns the address in SenderAddressResult error\\n     * @param initCode the constructor code to be passed into the UserOperation.\\n     */\\n    function getSenderAddress(bytes memory initCode) external;\\n\\n    /**\\n     * return value of getSenderAddress\\n     */\\n    error SenderAddressResult(address sender);\\n\\n}\\n\\n\",\"keccak256\":\"0x17ba3872b68a55431b63a764cd40511c7906286dcb9b066821b052be349bcf16\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or a wallet)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by a paymaster.\\n */\\ninterface IStakeManager {\\n\\n    event Deposited(\\n        address indexed account,\\n        uint256 totalDeposit\\n    );\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 withdrawTime\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed account,\\n        uint256 withdrawTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param deposit the account's deposit\\n     * @param staked true if this account is staked as a paymaster\\n     * @param stake actual amount of ether staked for this paymaster.\\n     * @param unstakeDelaySec minimum delay to withdraw the stake. must be above the global unstakeDelaySec\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\n     * @dev sizes were chosen so that (deposit,staked) fit into one cell (used during handleOps)\\n     *    and the rest fit into a 2nd cell.\\n     *    112 bit allows for 2^15 eth\\n     *    64 bit for full timestamp\\n     *    32 bit allow 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint112 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint64 withdrawTime;\\n    }\\n\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\n\\n    /// return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n}\\n\",\"keccak256\":\"0x6ad500c56e1baa0d977edbc433287f69e178260934c8dd6e2c68b07c22d40d8d\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IWallet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\ninterface IWallet {\\n\\n    /**\\n     * Validate user's signature and nonce\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\n     *\\n     * @dev Must validate caller is the entryPoint.\\n     *      Must validate the signature and nonce\\n     * @param userOp the operation that is about to be executed.\\n     * @param requestId hash of the user's request data. can be used as the basis for signature.\\n     * @param aggregator the aggregator used to validate the signature. NULL for non-aggregated signature wallets.\\n     * @param missingWalletFunds missing funds on the wallet's deposit in the entrypoint.\\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\n     * @return deadline the last block timestamp this operation is valid, or zero if it is valid indefinitely.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 requestId, address aggregator, uint256 missingWalletFunds)\\n    external returns (uint256 deadline);\\n}\\n\",\"keccak256\":\"0xf45512f2e5f1751a396dbcf48db802ec58d7957270ec5b2f575c9c17710d1a5f\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n    /**\\n     * User Operation struct\\n     * @param sender the sender account of this request\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor\\n     * @param callData the method call to execute on this account.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter\\n     * @param paymasterAndData if set, this field hold the paymaster address and \\\"paymaster-specific-data\\\". the paymaster will pay for the transaction instead of the sender\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/miner might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        //lighter signature scheme. must match UserOp.ts#packUserOp\\n        bytes calldata sig = userOp.signature;\\n        // copy directly the userOp from calldata up to (but not including) the signature.\\n        // this encoding depends on the ABI encoding of calldata, but is much lighter to copy\\n        // than referencing each field separately.\\n        assembly {\\n            let ofs := userOp\\n            let len := sub(sub(sig.offset, ofs), 32)\\n            ret := mload(0x40)\\n            mstore(0x40, add(ret, add(len, 32)))\\n            mstore(ret, len)\\n            calldatacopy(add(ret, 32), ofs, len)\\n        }\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x223214375bdcf5670f16cbe4697ce5eae0cd673760db92491ad37967fbb3a6d0\",\"license\":\"GPL-3.0\"},\"contracts/samples/SimpleWallet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"../core/BaseWallet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n  * minimal wallet.\\n  *  this is sample minimal wallet.\\n  *  has execute, eth handling methods\\n  *  has a single signer that can send requests through the entryPoint.\\n  */\\ncontract SimpleWallet is BaseWallet {\\n    using ECDSA for bytes32;\\n\\n    //explicit sizes of nonce, to fit a single storage cell with \\\"owner\\\"\\n    uint96 private _nonce;\\n    address public owner;\\n\\n    function nonce() public view virtual override returns (uint256) {\\n        return _nonce;\\n    }\\n\\n    function entryPoint() public view virtual override returns (IEntryPoint) {\\n        return _entryPoint;\\n    }\\n\\n    IEntryPoint private _entryPoint;\\n\\n    event EntryPointChanged(address indexed oldEntryPoint, address indexed newEntryPoint);\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n\\n    constructor(IEntryPoint anEntryPoint, address anOwner) {\\n        _entryPoint = anEntryPoint;\\n        owner = anOwner;\\n    }\\n\\n    modifier onlyOwner() {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    function _onlyOwner() internal view {\\n        //directly from EOA owner, or through the entryPoint (which gets redirected through execFromEntryPoint)\\n        require(msg.sender == owner || msg.sender == address(this), \\\"only owner\\\");\\n    }\\n\\n    /**\\n     * transfer eth value to a destination address\\n     */\\n    function transfer(address payable dest, uint256 amount) external onlyOwner {\\n        dest.transfer(amount);\\n    }\\n\\n    /**\\n     * execute a transaction (called directly from owner, not by entryPoint)\\n     */\\n    function exec(address dest, uint256 value, bytes calldata func) external onlyOwner {\\n        _call(dest, value, func);\\n    }\\n\\n    /**\\n     * execute a sequence of transaction\\n     */\\n    function execBatch(address[] calldata dest, uint256[] calldata value, bytes[] calldata func) external onlyOwner {\\n        require(dest.length == func.length, \\\"wrong func array lengths\\\");\\n        require(dest.length == value.length, \\\"wrong value array lengths\\\");\\n        for (uint256 i = 0; i < dest.length; i++) {\\n            _call(dest[i], value[i], func[i]);\\n        }\\n    }\\n\\n    /**\\n     * change entry-point:\\n     * a wallet must have a method for replacing the entryPoint, in case the the entryPoint is\\n     * upgraded to a newer version.\\n     */\\n    function _updateEntryPoint(address newEntryPoint) internal override {\\n        emit EntryPointChanged(address(_entryPoint), newEntryPoint);\\n        _entryPoint = IEntryPoint(payable(newEntryPoint));\\n    }\\n\\n    function _requireFromAdmin() internal view override {\\n        _onlyOwner();\\n    }\\n\\n    /**\\n     * validate the userOp is correct.\\n     * revert if it doesn't.\\n     * - must only be called from the entryPoint.\\n     * - make sure the signature is of our supported signer.\\n     * - validate current nonce matches request nonce, and increment it.\\n     * - pay prefund, in case current deposit is not enough\\n     */\\n    function _requireFromEntryPoint() internal override view {\\n        require(msg.sender == address(entryPoint()), \\\"wallet: not from EntryPoint\\\");\\n    }\\n\\n    // called by entryPoint, only after validateUserOp succeeded.\\n    function execFromEntryPoint(address dest, uint256 value, bytes calldata func) external {\\n        _requireFromEntryPoint();\\n        _call(dest, value, func);\\n    }\\n\\n    /// implement template method of BaseWallet\\n    function _validateAndUpdateNonce(UserOperation calldata userOp) internal override {\\n        require(_nonce++ == userOp.nonce, \\\"wallet: invalid nonce\\\");\\n    }\\n\\n    /// implement template method of BaseWallet\\n    function _validateSignature(UserOperation calldata userOp, bytes32 requestId, address)\\n    internal override virtual returns (uint256 deadline) {\\n        bytes32 hash = requestId.toEthSignedMessageHash();\\n        require(owner == hash.recover(userOp.signature), \\\"wallet: wrong signature\\\");\\n        return 0;\\n    }\\n\\n    function _call(address target, uint256 value, bytes memory data) internal {\\n        (bool success, bytes memory result) = target.call{value : value}(data);\\n        if (!success) {\\n            assembly {\\n                revert(add(result, 32), mload(result))\\n            }\\n        }\\n    }\\n\\n    /**\\n     * check current wallet deposit in the entryPoint\\n     */\\n    function getDeposit() public view returns (uint256) {\\n        return entryPoint().balanceOf(address(this));\\n    }\\n\\n    /**\\n     * deposit more funds for this wallet in the entryPoint\\n     */\\n    function addDeposit() public payable {\\n\\n        (bool req,) = address(entryPoint()).call{value : msg.value}(\\\"\\\");\\n        require(req);\\n    }\\n\\n    /**\\n     * withdraw value from the wallet's deposit\\n     * @param withdrawAddress target to send to\\n     * @param amount to withdraw\\n     */\\n    function withdrawDepositTo(address payable withdrawAddress, uint256 amount) public onlyOwner {\\n        entryPoint().withdrawTo(withdrawAddress, amount);\\n    }\\n}\\n\\n\",\"keccak256\":\"0xab0042319ab7918aca4dede0aad05962c57ab0eda860b1f101cfb64515900d7e\",\"license\":\"GPL-3.0\"},\"contracts/samples/SimpleWalletDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./SimpleWallet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n/**\\n * A sampler deployer contract for SimpleWallet\\n * A UserOperations \\\"initCode\\\" holds the address of the deployer, and a method call (to deployWallet, in this sample deployer).\\n * The deployer's deployWallet returns the target wallet address even if it is already installed.\\n * This way, the entryPoint.getSenderAddress() can be called either before or after the wallet is created.\\n */\\ncontract SimpleWalletDeployer {\\n    function isDeployed(address _addr) private view returns (bool isContract){\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return (size > 0);\\n    }\\n\\n    /**\\n     * create a wallet, and return its address.\\n     * returns the address even if the wallet is already deployed.\\n     * Note that during UserOperation execution, this method is called only if the wallet is not deployed.\\n     * This method returns an existing wallet address so that entryPoint.getSenderAddress() would work even after wallet creation\\n     */\\n    function deployWallet(IEntryPoint entryPoint, address owner, uint salt) public returns (SimpleWallet ret) {\\n        address addr = getWalletAddress(entryPoint, owner, salt);\\n        uint codeSize = addr.code.length;\\n        if (codeSize > 0) {\\n            return SimpleWallet(payable(addr));\\n        }\\n        ret = new SimpleWallet{salt : bytes32(salt)}(entryPoint, owner);\\n    }\\n\\n    /**\\n     * calculate the counterfactual address of this wallet as it would be returned by deployWallet()\\n     */\\n    function getWalletAddress(IEntryPoint entryPoint, address owner, uint salt) public view returns (address) {\\n        return Create2.computeAddress(bytes32(salt), keccak256(abi.encodePacked(\\n                type(SimpleWallet).creationCode,\\n                abi.encode(entryPoint, owner))\\n            ));\\n    }\\n}\\n\",\"keccak256\":\"0xf5a1b3de17cafaad744133f3132fe282a4f9a68754955d6337292391c8f6e419\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061183b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80635856eddc1461003b578063ffb5b6af14610077575b600080fd5b61004e6100493660046102c2565b61008a565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61004e6100853660046102c2565b6101f9565b60006101ef8260001b604051806020016100a390610290565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f90910116604081815273ffffffffffffffffffffffffffffffffffffffff8981166020840152881690820152606001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610138929160200161033e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815282825280516020918201207fff00000000000000000000000000000000000000000000000000000000000000848301523060601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602185015260358401859052605580850182905283518086039091018152607590940190925282519201919091206000906101f2565b90505b9392505050565b60008061020785858561008a565b905073ffffffffffffffffffffffffffffffffffffffff81163b801561022f575090506101f2565b8360001b868660405161024190610290565b73ffffffffffffffffffffffffffffffffffffffff9283168152911660208201526040018190604051809103906000f5905080158015610285573d6000803e3d6000fd5b509695505050505050565b6114b28061035483390190565b73ffffffffffffffffffffffffffffffffffffffff811681146102bf57600080fd5b50565b6000806000606084860312156102d757600080fd5b83356102e28161029d565b925060208401356102f28161029d565b929592945050506040919091013590565b6000815160005b81811015610324576020818501810151868301520161030a565b81811115610333576000828601525b509290920192915050565b60006101ef61034d8386610303565b8461030356fe608060405234801561001057600080fd5b506040516114b23803806114b283398101604081905261002f9161008f565b600180546001600160a01b039384166001600160a01b031990911617905560008054919092166c01000000000000000000000000026001600160601b039091161790556100c9565b6001600160a01b038116811461008c57600080fd5b50565b600080604083850312156100a257600080fd5b82516100ad81610077565b60208401519092506100be81610077565b809150509250929050565b6113da806100d86000396000f3fe6080604052600436106100cb5760003560e01c80638da5cb5b11610074578063affed0e01161004e578063affed0e014610236578063b0d691fe14610259578063c399ec881461028457600080fd5b80638da5cb5b14610194578063a4d89251146101f6578063a9059cbb1461021657600080fd5b80634a58db19116100a55780634a58db191461014c5780634d44560d1461015457806380c5c7d01461017457600080fd5b80630565bb67146100d75780630825d1fc146100f95780631b71bb6e1461012c57600080fd5b366100d257005b600080fd5b3480156100e357600080fd5b506100f76100f2366004610fdc565b610299565b005b34801561010557600080fd5b50610119610114366004611065565b6102e8565b6040519081526020015b60405180910390f35b34801561013857600080fd5b506100f76101473660046110cc565b61032f565b6100f7610343565b34801561016057600080fd5b506100f761016f3660046110f0565b6103ce565b34801561018057600080fd5b506100f761018f366004610fdc565b61047d565b3480156101a057600080fd5b506000546101d1906c01000000000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610123565b34801561020257600080fd5b506100f7610211366004611161565b610485565b34801561022257600080fd5b506100f76102313660046110f0565b61062b565b34801561024257600080fd5b506000546bffffffffffffffffffffffff16610119565b34801561026557600080fd5b5060015473ffffffffffffffffffffffffffffffffffffffff166101d1565b34801561029057600080fd5b5061011961067b565b6102a1610731565b6102e2848484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107ce92505050565b50505050565b60006102f2610852565b6102fd8585856108d3565b905061030c60408601866111fb565b905060000361031e5761031e85610a1c565b61032782610ae4565b949350505050565b610337610b4f565b61034081610b57565b50565b600061036460015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff163460405160006040518083038185875af1925050503d80600081146103bb576040519150601f19603f3d011682016040523d82523d6000602084013e6103c0565b606091505b505090508061034057600080fd5b6103d6610731565b60015473ffffffffffffffffffffffffffffffffffffffff166040517f205c287800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052919091169063205c287890604401600060405180830381600087803b15801561046157600080fd5b505af1158015610475573d6000803e3d6000fd5b505050505050565b6102a1610852565b61048d610731565b8481146104fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f77726f6e672066756e63206172726179206c656e67746873000000000000000060448201526064015b60405180910390fd5b848314610564576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f77726f6e672076616c7565206172726179206c656e677468730000000000000060448201526064016104f2565b60005b858110156106225761061087878381811061058457610584611260565b905060200201602081019061059991906110cc565b8686848181106105ab576105ab611260565b905060200201358585858181106105c4576105c4611260565b90506020028101906105d691906111fb565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107ce92505050565b8061061a816112be565b915050610567565b50505050505050565b610633610731565b60405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f19350505050158015610676573d6000803e3d6000fd5b505050565b600061069c60015473ffffffffffffffffffffffffffffffffffffffff1690565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff91909116906370a0823190602401602060405180830381865afa158015610708573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072c91906112f6565b905090565b6000546c01000000000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1633148061076657503330145b6107cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c79206f776e65720000000000000000000000000000000000000000000060448201526064016104f2565b565b6000808473ffffffffffffffffffffffffffffffffffffffff1684846040516107f7919061130f565b60006040518083038185875af1925050503d8060008114610834576040519150601f19603f3d011682016040523d82523d6000602084013e610839565b606091505b50915091508161084b57805160208201fd5b5050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146107cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f77616c6c65743a206e6f742066726f6d20456e747279506f696e74000000000060448201526064016104f2565b60008061092d846040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b905061097d6109406101408701876111fb565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508593925050610be59050565b6000546c01000000000000000000000000900473ffffffffffffffffffffffffffffffffffffffff908116911614610a11576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f77616c6c65743a2077726f6e67207369676e617475726500000000000000000060448201526064016104f2565b506000949350505050565b600080546020830135916bffffffffffffffffffffffff9091169080610a418361134a565b91906101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506bffffffffffffffffffffffff1614610340576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f77616c6c65743a20696e76616c6964206e6f6e6365000000000000000000000060448201526064016104f2565b80156103405760405160009033907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90849084818181858888f193505050503d806000811461084b576040519150601f19603f3d011682016040523d82523d6000602084013e61084b565b6107cc610731565b60015460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f450909c1478d09248269d4ad4fa8cba61ca3f50faed58c7aedefa51c7f62b83a90600090a3600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000806000610bf48585610c09565b91509150610c0181610c4e565b509392505050565b6000808251604103610c3f5760208301516040840151606085015160001a610c3387828585610ea2565b94509450505050610c47565b506000905060025b9250929050565b6000816004811115610c6257610c62611375565b03610c6a5750565b6001816004811115610c7e57610c7e611375565b03610ce5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104f2565b6002816004811115610cf957610cf9611375565b03610d60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104f2565b6003816004811115610d7457610d74611375565b03610e01576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104f2565b6004816004811115610e1557610e15611375565b03610340576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104f2565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610ed95750600090506003610fb1565b8460ff16601b14158015610ef157508460ff16601c14155b15610f025750600090506004610fb1565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610f56573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116610faa57600060019250925050610fb1565b9150600090505b94509492505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461034057600080fd5b60008060008060608587031215610ff257600080fd5b8435610ffd81610fba565b935060208501359250604085013567ffffffffffffffff8082111561102157600080fd5b818701915087601f83011261103557600080fd5b81358181111561104457600080fd5b88602082850101111561105657600080fd5b95989497505060200194505050565b6000806000806080858703121561107b57600080fd5b843567ffffffffffffffff81111561109257600080fd5b850161016081880312156110a557600080fd5b93506020850135925060408501356110bc81610fba565b9396929550929360600135925050565b6000602082840312156110de57600080fd5b81356110e981610fba565b9392505050565b6000806040838503121561110357600080fd5b823561110e81610fba565b946020939093013593505050565b60008083601f84011261112e57600080fd5b50813567ffffffffffffffff81111561114657600080fd5b6020830191508360208260051b8501011115610c4757600080fd5b6000806000806000806060878903121561117a57600080fd5b863567ffffffffffffffff8082111561119257600080fd5b61119e8a838b0161111c565b909850965060208901359150808211156111b757600080fd5b6111c38a838b0161111c565b909650945060408901359150808211156111dc57600080fd5b506111e989828a0161111c565b979a9699509497509295939492505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261123057600080fd5b83018035915067ffffffffffffffff82111561124b57600080fd5b602001915036819003821315610c4757600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036112ef576112ef61128f565b5060010190565b60006020828403121561130857600080fd5b5051919050565b6000825160005b818110156113305760208186018101518583015201611316565b8181111561133f576000828501525b509190910192915050565b60006bffffffffffffffffffffffff80831681810361136b5761136b61128f565b6001019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220adae9d72cac3ad5502740c71e53efd7ab7f3f669a4b39b0cd309e13d2657a09264736f6c634300080f0033a2646970667358221220e9a331b2588727a4b29d25f407b18c18104312f24d3ab02de72494c3dc05ab7564736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80635856eddc1461003b578063ffb5b6af14610077575b600080fd5b61004e6100493660046102c2565b61008a565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61004e6100853660046102c2565b6101f9565b60006101ef8260001b604051806020016100a390610290565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f90910116604081815273ffffffffffffffffffffffffffffffffffffffff8981166020840152881690820152606001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610138929160200161033e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815282825280516020918201207fff00000000000000000000000000000000000000000000000000000000000000848301523060601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602185015260358401859052605580850182905283518086039091018152607590940190925282519201919091206000906101f2565b90505b9392505050565b60008061020785858561008a565b905073ffffffffffffffffffffffffffffffffffffffff81163b801561022f575090506101f2565b8360001b868660405161024190610290565b73ffffffffffffffffffffffffffffffffffffffff9283168152911660208201526040018190604051809103906000f5905080158015610285573d6000803e3d6000fd5b509695505050505050565b6114b28061035483390190565b73ffffffffffffffffffffffffffffffffffffffff811681146102bf57600080fd5b50565b6000806000606084860312156102d757600080fd5b83356102e28161029d565b925060208401356102f28161029d565b929592945050506040919091013590565b6000815160005b81811015610324576020818501810151868301520161030a565b81811115610333576000828601525b509290920192915050565b60006101ef61034d8386610303565b8461030356fe608060405234801561001057600080fd5b506040516114b23803806114b283398101604081905261002f9161008f565b600180546001600160a01b039384166001600160a01b031990911617905560008054919092166c01000000000000000000000000026001600160601b039091161790556100c9565b6001600160a01b038116811461008c57600080fd5b50565b600080604083850312156100a257600080fd5b82516100ad81610077565b60208401519092506100be81610077565b809150509250929050565b6113da806100d86000396000f3fe6080604052600436106100cb5760003560e01c80638da5cb5b11610074578063affed0e01161004e578063affed0e014610236578063b0d691fe14610259578063c399ec881461028457600080fd5b80638da5cb5b14610194578063a4d89251146101f6578063a9059cbb1461021657600080fd5b80634a58db19116100a55780634a58db191461014c5780634d44560d1461015457806380c5c7d01461017457600080fd5b80630565bb67146100d75780630825d1fc146100f95780631b71bb6e1461012c57600080fd5b366100d257005b600080fd5b3480156100e357600080fd5b506100f76100f2366004610fdc565b610299565b005b34801561010557600080fd5b50610119610114366004611065565b6102e8565b6040519081526020015b60405180910390f35b34801561013857600080fd5b506100f76101473660046110cc565b61032f565b6100f7610343565b34801561016057600080fd5b506100f761016f3660046110f0565b6103ce565b34801561018057600080fd5b506100f761018f366004610fdc565b61047d565b3480156101a057600080fd5b506000546101d1906c01000000000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610123565b34801561020257600080fd5b506100f7610211366004611161565b610485565b34801561022257600080fd5b506100f76102313660046110f0565b61062b565b34801561024257600080fd5b506000546bffffffffffffffffffffffff16610119565b34801561026557600080fd5b5060015473ffffffffffffffffffffffffffffffffffffffff166101d1565b34801561029057600080fd5b5061011961067b565b6102a1610731565b6102e2848484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107ce92505050565b50505050565b60006102f2610852565b6102fd8585856108d3565b905061030c60408601866111fb565b905060000361031e5761031e85610a1c565b61032782610ae4565b949350505050565b610337610b4f565b61034081610b57565b50565b600061036460015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff163460405160006040518083038185875af1925050503d80600081146103bb576040519150601f19603f3d011682016040523d82523d6000602084013e6103c0565b606091505b505090508061034057600080fd5b6103d6610731565b60015473ffffffffffffffffffffffffffffffffffffffff166040517f205c287800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052919091169063205c287890604401600060405180830381600087803b15801561046157600080fd5b505af1158015610475573d6000803e3d6000fd5b505050505050565b6102a1610852565b61048d610731565b8481146104fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f77726f6e672066756e63206172726179206c656e67746873000000000000000060448201526064015b60405180910390fd5b848314610564576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f77726f6e672076616c7565206172726179206c656e677468730000000000000060448201526064016104f2565b60005b858110156106225761061087878381811061058457610584611260565b905060200201602081019061059991906110cc565b8686848181106105ab576105ab611260565b905060200201358585858181106105c4576105c4611260565b90506020028101906105d691906111fb565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107ce92505050565b8061061a816112be565b915050610567565b50505050505050565b610633610731565b60405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f19350505050158015610676573d6000803e3d6000fd5b505050565b600061069c60015473ffffffffffffffffffffffffffffffffffffffff1690565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff91909116906370a0823190602401602060405180830381865afa158015610708573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072c91906112f6565b905090565b6000546c01000000000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1633148061076657503330145b6107cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c79206f776e65720000000000000000000000000000000000000000000060448201526064016104f2565b565b6000808473ffffffffffffffffffffffffffffffffffffffff1684846040516107f7919061130f565b60006040518083038185875af1925050503d8060008114610834576040519150601f19603f3d011682016040523d82523d6000602084013e610839565b606091505b50915091508161084b57805160208201fd5b5050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146107cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f77616c6c65743a206e6f742066726f6d20456e747279506f696e74000000000060448201526064016104f2565b60008061092d846040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b905061097d6109406101408701876111fb565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508593925050610be59050565b6000546c01000000000000000000000000900473ffffffffffffffffffffffffffffffffffffffff908116911614610a11576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f77616c6c65743a2077726f6e67207369676e617475726500000000000000000060448201526064016104f2565b506000949350505050565b600080546020830135916bffffffffffffffffffffffff9091169080610a418361134a565b91906101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506bffffffffffffffffffffffff1614610340576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f77616c6c65743a20696e76616c6964206e6f6e6365000000000000000000000060448201526064016104f2565b80156103405760405160009033907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90849084818181858888f193505050503d806000811461084b576040519150601f19603f3d011682016040523d82523d6000602084013e61084b565b6107cc610731565b60015460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f450909c1478d09248269d4ad4fa8cba61ca3f50faed58c7aedefa51c7f62b83a90600090a3600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000806000610bf48585610c09565b91509150610c0181610c4e565b509392505050565b6000808251604103610c3f5760208301516040840151606085015160001a610c3387828585610ea2565b94509450505050610c47565b506000905060025b9250929050565b6000816004811115610c6257610c62611375565b03610c6a5750565b6001816004811115610c7e57610c7e611375565b03610ce5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104f2565b6002816004811115610cf957610cf9611375565b03610d60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104f2565b6003816004811115610d7457610d74611375565b03610e01576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104f2565b6004816004811115610e1557610e15611375565b03610340576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104f2565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610ed95750600090506003610fb1565b8460ff16601b14158015610ef157508460ff16601c14155b15610f025750600090506004610fb1565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610f56573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116610faa57600060019250925050610fb1565b9150600090505b94509492505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461034057600080fd5b60008060008060608587031215610ff257600080fd5b8435610ffd81610fba565b935060208501359250604085013567ffffffffffffffff8082111561102157600080fd5b818701915087601f83011261103557600080fd5b81358181111561104457600080fd5b88602082850101111561105657600080fd5b95989497505060200194505050565b6000806000806080858703121561107b57600080fd5b843567ffffffffffffffff81111561109257600080fd5b850161016081880312156110a557600080fd5b93506020850135925060408501356110bc81610fba565b9396929550929360600135925050565b6000602082840312156110de57600080fd5b81356110e981610fba565b9392505050565b6000806040838503121561110357600080fd5b823561110e81610fba565b946020939093013593505050565b60008083601f84011261112e57600080fd5b50813567ffffffffffffffff81111561114657600080fd5b6020830191508360208260051b8501011115610c4757600080fd5b6000806000806000806060878903121561117a57600080fd5b863567ffffffffffffffff8082111561119257600080fd5b61119e8a838b0161111c565b909850965060208901359150808211156111b757600080fd5b6111c38a838b0161111c565b909650945060408901359150808211156111dc57600080fd5b506111e989828a0161111c565b979a9699509497509295939492505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261123057600080fd5b83018035915067ffffffffffffffff82111561124b57600080fd5b602001915036819003821315610c4757600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036112ef576112ef61128f565b5060010190565b60006020828403121561130857600080fd5b5051919050565b6000825160005b818110156113305760208186018101518583015201611316565b8181111561133f576000828501525b509190910192915050565b60006bffffffffffffffffffffffff80831681810361136b5761136b61128f565b6001019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220adae9d72cac3ad5502740c71e53efd7ab7f3f669a4b39b0cd309e13d2657a09264736f6c634300080f0033a2646970667358221220e9a331b2588727a4b29d25f407b18c18104312f24d3ab02de72494c3dc05ab7564736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deployWallet(address,address,uint256)": {
        "notice": "create a wallet, and return its address. returns the address even if the wallet is already deployed. Note that during UserOperation execution, this method is called only if the wallet is not deployed. This method returns an existing wallet address so that entryPoint.getSenderAddress() would work even after wallet creation"
      },
      "getWalletAddress(address,address,uint256)": {
        "notice": "calculate the counterfactual address of this wallet as it would be returned by deployWallet()"
      }
    },
    "notice": "A sampler deployer contract for SimpleWallet A UserOperations \"initCode\" holds the address of the deployer, and a method call (to deployWallet, in this sample deployer). The deployer's deployWallet returns the target wallet address even if it is already installed. This way, the entryPoint.getSenderAddress() can be called either before or after the wallet is created.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}